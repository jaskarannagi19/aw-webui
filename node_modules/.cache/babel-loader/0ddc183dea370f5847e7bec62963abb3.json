{"remainingRequest":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/thread-loader/dist/cjs.js!/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/babel-loader/lib/index.js!/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/src/views/QueryExplorer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/src/views/QueryExplorer.vue","mtime":1622830085274},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvamFza2FyYW4vY29kZS9qYXNrYXJhbi9hY3Rpdml0eXdhdGNoL2F3LXNlcnZlci1ydXN0L2F3LXdlYnVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwp2YXIgdG9kYXkgPSBtb21lbnQoKS5zdGFydE9mKCdkYXknKTsKdmFyIHRvbW9ycm93ID0gbW9tZW50KHRvZGF5KS5hZGQoMjQsICdob3VycycpOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1F1ZXJ5RXhwbG9yZXInLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBxdWVyeV9jb2RlOiAiYWZrX2V2ZW50cyA9IHF1ZXJ5X2J1Y2tldChmaW5kX2J1Y2tldChcImF3LXdhdGNoZXItYWZrX1wiKSk7XG53aW5kb3dfZXZlbnRzID0gcXVlcnlfYnVja2V0KGZpbmRfYnVja2V0KFwiYXctd2F0Y2hlci13aW5kb3dfXCIpKTtcbndpbmRvd19ldmVudHMgPSBmaWx0ZXJfcGVyaW9kX2ludGVyc2VjdCh3aW5kb3dfZXZlbnRzLCBmaWx0ZXJfa2V5dmFscyhhZmtfZXZlbnRzLCBcInN0YXR1c1wiLCBbXCJub3QtYWZrXCJdKSk7XG5tZXJnZWRfZXZlbnRzID0gbWVyZ2VfZXZlbnRzX2J5X2tleXMod2luZG93X2V2ZW50cywgW1wiYXBwXCIsIFwidGl0bGVcIl0pO1xuUkVUVVJOID0gc29ydF9ieV9kdXJhdGlvbihtZXJnZWRfZXZlbnRzKTsiLAogICAgICBldmVudF90eXBlOiAnY3VycmVudHdpbmRvdycsCiAgICAgIGV2ZW50czogW10sCiAgICAgIHRvZGF5OiB0b2RheS5mb3JtYXQoKSwKICAgICAgdG9tb3Jyb3c6IHRvbW9ycm93LmZvcm1hdCgpLAogICAgICBlcnJvcjogJycsCiAgICAgIHN0YXJ0ZGF0ZTogdG9kYXkuZm9ybWF0KCdZWVlZLU1NLUREJyksCiAgICAgIGVuZGRhdGU6IHRvbW9ycm93LmZvcm1hdCgnWVlZWS1NTS1ERCcpCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGV2ZW50Y291bnRfc3RyOiBmdW5jdGlvbiBldmVudGNvdW50X3N0cigpIHsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5ldmVudHMpKSByZXR1cm4gJ051bWJlciBvZiBldmVudHM6ICcgKyB0aGlzLmV2ZW50cy5sZW5ndGg7ZWxzZSByZXR1cm4gJyc7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBxdWVyeTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3F1ZXJ5ID0gX2FzeW5jVG9HZW5lcmF0b3IocmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgcXVlcnksIHRpbWVwZXJpb2RzLCBkYXRhOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdGhpcy5xdWVyeV9jb2RlLnNwbGl0KCc7JykubWFwKGZ1bmN0aW9uIChzKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBzLnRyaW0oKSArICc7JzsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGltZXBlcmlvZHMgPSBbbW9tZW50KHRoaXMuc3RhcnRkYXRlKS5mb3JtYXQoKSArICcvJyArIG1vbWVudCh0aGlzLmVuZGRhdGUpLmZvcm1hdCgpXTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kYXcucXVlcnkodGltZXBlcmlvZHMsIHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cyA9IGRhdGFbMF07CiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gJyc7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gX2NvbnRleHQudDAucmVzcG9uc2UuZGF0YS5tZXNzYWdlOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1syLCAxMF1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcXVlcnkoKSB7CiAgICAgICAgcmV0dXJuIF9xdWVyeS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcXVlcnk7CiAgICB9KCkKICB9Cn07"},{"version":3,"sources":["QueryExplorer.vue"],"names":[],"mappings":";;;;;;;AAqCA,OAAA,MAAA,MAAA,QAAA;AAEA,IAAA,KAAA,GAAA,MAAA,GAAA,OAAA,CAAA,KAAA,CAAA;AACA,IAAA,QAAA,GAAA,MAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,EAAA,EAAA,OAAA,CAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,UAAA,2WADA;AAMA,MAAA,UAAA,EAAA,eANA;AAOA,MAAA,MAAA,EAAA,EAPA;AAQA,MAAA,KAAA,EAAA,KAAA,CAAA,MAAA,EARA;AASA,MAAA,QAAA,EAAA,QAAA,CAAA,MAAA,EATA;AAUA,MAAA,KAAA,EAAA,EAVA;AAWA,MAAA,SAAA,EAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAXA;AAYA,MAAA,OAAA,EAAA,QAAA,CAAA,MAAA,CAAA,YAAA;AAZA,KAAA;AAcA,GAjBA;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,cAAA,EAAA,0BAAA;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,KAAA,MAAA,CAAA,EAAA,OAAA,uBAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KACA,OAAA,EAAA;AACA;AAJA,GAlBA;AAwBA,EAAA,OAAA,EAAA;AACA,IAAA,KAAA;AAAA,6DAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KADA,GACA,KAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AAAA,yBAAA,CAAA,CAAA,IAAA,KAAA,GAAA;AAAA,iBAAA,CADA;AAEA,gBAAA,WAFA,GAEA,CAAA,MAAA,CAAA,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,GAAA,MAAA,CAAA,KAAA,OAAA,CAAA,CAAA,MAAA,EAAA,CAFA;AAAA;AAAA;AAAA,uBAIA,KAAA,GAAA,CAAA,KAAA,CAAA,WAAA,EAAA,KAAA,CAJA;;AAAA;AAIA,gBAAA,IAJA;AAKA,qBAAA,MAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,qBAAA,KAAA,GAAA,EAAA;AANA;AAAA;;AAAA;AAAA;AAAA;AAQA,qBAAA,KAAA,GAAA,YAAA,QAAA,CAAA,IAAA,CAAA,OAAA;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADA;AAxBA,CAAA","sourcesContent":["<template lang=\"pug\">\n\ndiv\n  h3 Query Explorer\n\n  | See #[a(href=\"https://docs.activitywatch.net/en/latest/examples/querying-data.html\") the documentation] for help on how to write queries.\n\n  hr\n\n  div.alert.alert-danger(v-if=\"error\")\n    | {{error}}\n\n  form\n    div.form-row\n      div.form-group.col-md-6\n        | Start\n        input.form-control(type=\"date\", :max=\"today\", v-model=\"startdate\")\n      div.form-group.col-md-6\n        | End\n        input.form-control(type=\"date\", :max=\"tomorrow\", v-model=\"enddate\")\n\n    div.form-group\n      textarea.form-control(v-model=\"query_code\", style=\"font-family: monospace\" rows=4)\n    div.form-inline\n      div.form-group\n        button.btn.btn-success(type=\"button\", @click=\"query()\") Query\n      span(style=\"padding-left: 1em;\")\n      | {{eventcount_str}}\n\n  hr\n\n  aw-selectable-eventview(:events=\"events\", :event_type=\"event_type\")\n</template>\n\n<style scoped lang=\"scss\"></style>\n\n<script>\nimport moment from 'moment';\n\nconst today = moment().startOf('day');\nconst tomorrow = moment(today).add(24, 'hours');\n\nexport default {\n  name: 'QueryExplorer',\n  data() {\n    return {\n      query_code: `afk_events = query_bucket(find_bucket(\"aw-watcher-afk_\"));\nwindow_events = query_bucket(find_bucket(\"aw-watcher-window_\"));\nwindow_events = filter_period_intersect(window_events, filter_keyvals(afk_events, \"status\", [\"not-afk\"]));\nmerged_events = merge_events_by_keys(window_events, [\"app\", \"title\"]);\nRETURN = sort_by_duration(merged_events);`,\n      event_type: 'currentwindow',\n      events: [],\n      today: today.format(),\n      tomorrow: tomorrow.format(),\n      error: '',\n      startdate: today.format('YYYY-MM-DD'),\n      enddate: tomorrow.format('YYYY-MM-DD'),\n    };\n  },\n  computed: {\n    eventcount_str: function () {\n      if (Array.isArray(this.events)) return 'Number of events: ' + this.events.length;\n      else return '';\n    },\n  },\n  methods: {\n    query: async function () {\n      const query = this.query_code.split(';').map(s => s.trim() + ';');\n      const timeperiods = [moment(this.startdate).format() + '/' + moment(this.enddate).format()];\n      try {\n        const data = await this.$aw.query(timeperiods, query);\n        this.events = data[0];\n        this.error = '';\n      } catch (e) {\n        this.error = e.response.data.message;\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"src/views"}]}