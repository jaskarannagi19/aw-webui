{"remainingRequest":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/thread-loader/dist/cjs.js!/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/babel-loader/lib/index.js!/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/src/views/QueryExplorer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/src/views/QueryExplorer.vue","mtime":1622212604097},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvamFza2FyYW4vY29kZS9qYXNrYXJhbi9hY3Rpdml0eXdhdGNoL2F3LXNlcnZlci9hdy13ZWJ1aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKdmFyIHRvZGF5ID0gbW9tZW50KCkuc3RhcnRPZignZGF5Jyk7CnZhciB0b21vcnJvdyA9IG1vbWVudCh0b2RheSkuYWRkKDI0LCAnaG91cnMnKTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdRdWVyeUV4cGxvcmVyJywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcXVlcnlfY29kZTogImFma19ldmVudHMgPSBxdWVyeV9idWNrZXQoZmluZF9idWNrZXQoXCJhdy13YXRjaGVyLWFma19cIikpO1xud2luZG93X2V2ZW50cyA9IHF1ZXJ5X2J1Y2tldChmaW5kX2J1Y2tldChcImF3LXdhdGNoZXItd2luZG93X1wiKSk7XG53aW5kb3dfZXZlbnRzID0gZmlsdGVyX3BlcmlvZF9pbnRlcnNlY3Qod2luZG93X2V2ZW50cywgZmlsdGVyX2tleXZhbHMoYWZrX2V2ZW50cywgXCJzdGF0dXNcIiwgW1wibm90LWFma1wiXSkpO1xubWVyZ2VkX2V2ZW50cyA9IG1lcmdlX2V2ZW50c19ieV9rZXlzKHdpbmRvd19ldmVudHMsIFtcImFwcFwiLCBcInRpdGxlXCJdKTtcblJFVFVSTiA9IHNvcnRfYnlfZHVyYXRpb24obWVyZ2VkX2V2ZW50cyk7IiwKICAgICAgZXZlbnRfdHlwZTogJ2N1cnJlbnR3aW5kb3cnLAogICAgICBldmVudHM6IFtdLAogICAgICB0b2RheTogdG9kYXkuZm9ybWF0KCksCiAgICAgIHRvbW9ycm93OiB0b21vcnJvdy5mb3JtYXQoKSwKICAgICAgZXJyb3I6ICcnLAogICAgICBzdGFydGRhdGU6IHRvZGF5LmZvcm1hdCgnWVlZWS1NTS1ERCcpLAogICAgICBlbmRkYXRlOiB0b21vcnJvdy5mb3JtYXQoJ1lZWVktTU0tREQnKQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBldmVudGNvdW50X3N0cjogZnVuY3Rpb24gZXZlbnRjb3VudF9zdHIoKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnRzKSkgcmV0dXJuICdOdW1iZXIgb2YgZXZlbnRzOiAnICsgdGhpcy5ldmVudHMubGVuZ3RoO2Vsc2UgcmV0dXJuICcnOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgcXVlcnk6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9xdWVyeSA9IF9hc3luY1RvR2VuZXJhdG9yKHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHF1ZXJ5LCB0aW1lcGVyaW9kcywgZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBxdWVyeSA9IHRoaXMucXVlcnlfY29kZS5zcGxpdCgnOycpLm1hcChmdW5jdGlvbiAocykgewogICAgICAgICAgICAgICAgICByZXR1cm4gcy50cmltKCkgKyAnOyc7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHRpbWVwZXJpb2RzID0gW21vbWVudCh0aGlzLnN0YXJ0ZGF0ZSkuZm9ybWF0KCkgKyAnLycgKyBtb21lbnQodGhpcy5lbmRkYXRlKS5mb3JtYXQoKV07CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGF3LnF1ZXJ5KHRpbWVwZXJpb2RzLCBxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgdGhpcy5ldmVudHMgPSBkYXRhWzBdOwogICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9ICcnOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTA7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IF9jb250ZXh0LnQwLnJlc3BvbnNlLmRhdGEubWVzc2FnZTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMsIFtbMiwgMTBdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHF1ZXJ5KCkgewogICAgICAgIHJldHVybiBfcXVlcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHF1ZXJ5OwogICAgfSgpCiAgfQp9Ow=="},{"version":3,"sources":["QueryExplorer.vue"],"names":[],"mappings":";;;;;;;AAqCA,OAAA,MAAA,MAAA,QAAA;AAEA,IAAA,KAAA,GAAA,MAAA,GAAA,OAAA,CAAA,KAAA,CAAA;AACA,IAAA,QAAA,GAAA,MAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,EAAA,EAAA,OAAA,CAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,UAAA,2WADA;AAMA,MAAA,UAAA,EAAA,eANA;AAOA,MAAA,MAAA,EAAA,EAPA;AAQA,MAAA,KAAA,EAAA,KAAA,CAAA,MAAA,EARA;AASA,MAAA,QAAA,EAAA,QAAA,CAAA,MAAA,EATA;AAUA,MAAA,KAAA,EAAA,EAVA;AAWA,MAAA,SAAA,EAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAXA;AAYA,MAAA,OAAA,EAAA,QAAA,CAAA,MAAA,CAAA,YAAA;AAZA,KAAA;AAcA,GAjBA;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,cAAA,EAAA,0BAAA;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,KAAA,MAAA,CAAA,EAAA,OAAA,uBAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KACA,OAAA,EAAA;AACA;AAJA,GAlBA;AAwBA,EAAA,OAAA,EAAA;AACA,IAAA,KAAA;AAAA,6DAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KADA,GACA,KAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AAAA,yBAAA,CAAA,CAAA,IAAA,KAAA,GAAA;AAAA,iBAAA,CADA;AAEA,gBAAA,WAFA,GAEA,CAAA,MAAA,CAAA,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,GAAA,MAAA,CAAA,KAAA,OAAA,CAAA,CAAA,MAAA,EAAA,CAFA;AAAA;AAAA;AAAA,uBAIA,KAAA,GAAA,CAAA,KAAA,CAAA,WAAA,EAAA,KAAA,CAJA;;AAAA;AAIA,gBAAA,IAJA;AAKA,qBAAA,MAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,qBAAA,KAAA,GAAA,EAAA;AANA;AAAA;;AAAA;AAAA;AAAA;AAQA,qBAAA,KAAA,GAAA,YAAA,QAAA,CAAA,IAAA,CAAA,OAAA;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADA;AAxBA,CAAA","sourcesContent":["<template lang=\"pug\">\n\ndiv\n  h3 Query Explorer\n\n  | See #[a(href=\"https://docs.activitywatch.net/en/latest/examples/querying-data.html\") the documentation] for help on how to write queries.\n\n  hr\n\n  div.alert.alert-danger(v-if=\"error\")\n    | {{error}}\n\n  form\n    div.form-row\n      div.form-group.col-md-6\n        | Start\n        input.form-control(type=\"date\", :max=\"today\", v-model=\"startdate\")\n      div.form-group.col-md-6\n        | End\n        input.form-control(type=\"date\", :max=\"tomorrow\", v-model=\"enddate\")\n\n    div.form-group\n      textarea.form-control(v-model=\"query_code\", style=\"font-family: monospace\" rows=4)\n    div.form-inline\n      div.form-group\n        button.btn.btn-success(type=\"button\", @click=\"query()\") Query\n      span(style=\"padding-left: 1em;\")\n      | {{eventcount_str}}\n\n  hr\n\n  aw-selectable-eventview(:events=\"events\", :event_type=\"event_type\")\n</template>\n\n<style scoped lang=\"scss\"></style>\n\n<script>\nimport moment from 'moment';\n\nconst today = moment().startOf('day');\nconst tomorrow = moment(today).add(24, 'hours');\n\nexport default {\n  name: 'QueryExplorer',\n  data() {\n    return {\n      query_code: `afk_events = query_bucket(find_bucket(\"aw-watcher-afk_\"));\nwindow_events = query_bucket(find_bucket(\"aw-watcher-window_\"));\nwindow_events = filter_period_intersect(window_events, filter_keyvals(afk_events, \"status\", [\"not-afk\"]));\nmerged_events = merge_events_by_keys(window_events, [\"app\", \"title\"]);\nRETURN = sort_by_duration(merged_events);`,\n      event_type: 'currentwindow',\n      events: [],\n      today: today.format(),\n      tomorrow: tomorrow.format(),\n      error: '',\n      startdate: today.format('YYYY-MM-DD'),\n      enddate: tomorrow.format('YYYY-MM-DD'),\n    };\n  },\n  computed: {\n    eventcount_str: function () {\n      if (Array.isArray(this.events)) return 'Number of events: ' + this.events.length;\n      else return '';\n    },\n  },\n  methods: {\n    query: async function () {\n      const query = this.query_code.split(';').map(s => s.trim() + ';');\n      const timeperiods = [moment(this.startdate).format() + '/' + moment(this.enddate).format()];\n      try {\n        const data = await this.$aw.query(timeperiods, query);\n        this.events = data[0];\n        this.error = '';\n      } catch (e) {\n        this.error = e.response.data.message;\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"src/views"}]}