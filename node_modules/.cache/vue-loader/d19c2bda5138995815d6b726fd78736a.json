{"remainingRequest":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/src/components/CategoryEditTree.vue?vue&type=style&index=0&id=1e84f02e&scoped=true&lang=scss&","dependencies":[{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/src/components/CategoryEditTree.vue","mtime":1622212604093},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucm93LmNsYXNzOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlOwogIGJvZGVyLXJhZGl1czogNXB4Owp9Cg=="},{"version":3,"sources":["CategoryEditTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkMA;AACA;AACA;AACA","file":"CategoryEditTree.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\ndiv\n  div.row.py-2.class\n    div.col-8.col-md-4\n      span(:style=\"{ marginLeft: (1.5 * depth) + 'em', cursor: _class.children.length > 0 ? 'pointer' : null}\" @click=\"expanded = !expanded\")\n        span(v-if=\"_class.children.length > 0\" style=\"opacity: 0.8\")\n          icon(:name=\"expanded ? 'regular/minus-square' : 'regular/plus-square'\" scale=\"0.8\")\n        span(v-else style=\"opacity: 0.6\")\n          icon(name=\"circle\" scale=\"0.4\" style=\"margin-left: 1em; margin-right: 1.22em;\")\n        | {{ _class.name.slice(depth).join(\" âž¤ \")}}\n        icon.ml-1(v-if=\"_class.data && _class.data.color\" name=\"circle\" :style=\"'color: ' + _class.data.color\")\n        span.ml-1(v-if=\"_class.children.length > 0\" style=\"opacity: 0.5\") ({{totalChildren}})\n\n    div.col-4.col-md-8\n      span.d-none.d-md-inline\n        span(v-if=\"_class.rule.type === 'regex'\") Rule ({{_class.rule.type}}): #[code {{_class.rule.regex}}]\n        span(v-else, style=\"color: #888\") No rule\n      span.float-right\n        b-btn.ml-1(size=\"sm\", variant=\"outline-secondary\", @click=\"showEditModal()\" style=\"border: 0;\" pill)\n          icon(name=\"edit\")\n        b-btn.ml-1(size=\"sm\", variant=\"outline-success\", @click=\"addSubclass(_class); expanded = true\" style=\"border: 0;\" pill)\n          icon(name=\"plus\")\n  div\n    div.pa-2(v-for=\"child in _class.children\", style=\"background: rgba(0, 0, 0, 0);\", v-show=\"expanded\")\n      CategoryEditTree(:_class=\"child\", :depth=\"depth+1\")\n\n  b-modal(id=\"edit\" ref=\"edit\" title=\"Edit category\" @show=\"resetModal\" @hidden=\"resetModal\" @ok=\"handleOk\")\n    div.my-1\n      b-input-group.my-1(prepend=\"Name\")\n        b-form-input(v-model=\"editing.name\")\n      b-input-group(prepend=\"Parent\")\n        b-select(v-model=\"editing.parent\", :options=\"allCategories\")\n\n    hr\n\n    div.my-1\n      b Rule\n      b-input-group.my-1(prepend=\"Type\")\n        b-select(v-model=\"editing.rule.type\", :options=\"allRuleTypes\")\n      div(v-if=\"editing.rule.type === 'regex'\")\n        b-input-group.my-1(prepend=\"Pattern\")\n          b-form-input(v-model=\"editing.rule.regex\")\n        b-form-checkbox(v-model=\"editing.rule.ignore_case\" switch)\n          | Ignore case\n\n    hr\n\n    div.my-1\n      b Color\n\n      b-form-checkbox(v-model=\"editing.inherit_color\" switch)\n        | Inherit parent color\n      div.mt-1(v-show=\"!editing.inherit_color\")\n        color-picker(v-model=\"editing.color\")\n\n    //\n      div.my-1\n        b Productivity score\n        b-input-group.my-1(prepend=\"Points\")\n          b-form-input(v-model=\"editing.productivity\")\n\n    hr\n\n    div.my-1\n      b-btn(variant=\"danger\", @click=\"removeClass(_class); $refs.edit.hide()\")\n        icon(name=\"trash\")\n        | Remove category\n</template>\n\n<script>\nimport 'vue-awesome/icons/regular/plus-square';\nimport 'vue-awesome/icons/regular/minus-square';\nimport 'vue-awesome/icons/circle';\nimport 'vue-awesome/icons/caret-right';\nimport 'vue-awesome/icons/trash';\nimport 'vue-awesome/icons/plus';\nimport 'vue-awesome/icons/edit';\n\nimport ColorPicker from '~/components/ColorPicker';\n\nimport _ from 'lodash';\n\nexport default {\n  name: 'CategoryEditTree',\n  components: {\n    'color-picker': ColorPicker,\n  },\n  props: {\n    _class: Object,\n    depth: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data: function () {\n    return {\n      expanded: this.depth < 1,\n      color_focused: false,\n      editing: {\n        id: 0, // FIXME: Use ID assigned to category in vuex store, in order for saves to be uniquely targeted\n        name: null,\n        rule: {},\n        parent: [],\n        inherit_color: true,\n        color: null,\n      },\n    };\n  },\n  computed: {\n    allCategories: function () {\n      const categories = this.$store.getters['categories/all_categories'];\n      const entries = categories.map(c => {\n        return { text: c.join('->'), value: c };\n      });\n      return [{ value: [], text: 'None' }].concat(entries);\n    },\n    allRuleTypes: function () {\n      return [\n        { value: null, text: 'None' },\n        { value: 'regex', text: 'Regular Expression' },\n        //{ value: 'glob', text: 'Glob pattern' },\n      ];\n    },\n    totalChildren: function () {\n      function countChildren(node) {\n        return node.children.length + _.sum(_.map(node.children, countChildren));\n      }\n      return countChildren(this._class);\n    },\n  },\n  methods: {\n    addSubclass: function (parent) {\n      this.$store.commit('categories/addClass', {\n        name: parent.name.concat(['New class']),\n        rule: { type: 'regex', regex: 'FILL ME' },\n      });\n    },\n    removeClass: function (_class) {\n      // TODO: Show a confirmation dialog\n      // TODO: Remove children as well?\n      // TODO: Move button to edit modal?\n      this.$store.commit('categories/removeClass', _class);\n    },\n    showEditModal() {\n      this.$refs.edit.show();\n    },\n    checkFormValidity() {\n      // FIXME\n      return true;\n    },\n    handleOk(event) {\n      // Prevent modal from closing\n      event.preventDefault();\n      // Trigger submit handler\n      this.handleSubmit();\n    },\n    handleSubmit() {\n      // Exit when the form isn't valid\n      if (!this.checkFormValidity()) {\n        return;\n      }\n\n      // Save the category\n      const new_class = {\n        id: this.editing.id,\n        name: this.editing.parent.concat(this.editing.name),\n        rule: this.editing.rule.type !== null ? this.editing.rule : { type: null },\n        data: { color: this.editing.inherit_color === true ? undefined : this.editing.color },\n      };\n      this.$store.commit('categories/updateClass', new_class);\n\n      // Hide the modal manually\n      this.$nextTick(() => {\n        this.$refs.edit.hide();\n      });\n    },\n    resetModal() {\n      const color = this._class.data ? this._class.data.color : undefined;\n      const inherit_color = !color;\n      this.editing = {\n        id: this._class.id,\n        name: this._class.subname,\n        rule: _.cloneDeep(this._class.rule),\n        color,\n        inherit_color,\n        parent: this._class.parent ? this._class.parent : [],\n      };\n      //console.log(this.editing);\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.row.class:hover {\n  background-color: #eee;\n  boder-radius: 5px;\n}\n</style>\n"]}]}