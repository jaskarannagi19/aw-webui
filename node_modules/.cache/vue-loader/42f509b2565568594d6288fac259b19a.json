{"remainingRequest":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/src/components/Header.vue?vue&type=style&index=0&id=0661ebfe&lang=scss&scoped=true&","dependencies":[{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/src/components/Header.vue","mtime":1622830085270},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5maXhlZC10b3AtcGFkZGluZyB7CiAgcGFkZGluZy1ib3R0b206IDMuNWVtOwp9Cg=="},{"version":3,"sources":["Header.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;AACA;AACA","file":"Header.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\ndiv(:class=\"{'fixed-top-padding': fixedTopMenu}\")\n  b-navbar.aw-navbar(toggleable=\"lg\" :fixed=\"fixedTopMenu ? 'top' : null\")\n    // Brand on mobile\n    b-navbar-nav.d-block.d-lg-none\n      b-navbar-brand(to=\"/\" style=\"background-color: transparent;\")\n        img.aligh-middle(src=\"/static/logo.png\" style=\"height: 1.5em;\")\n        span.ml-2.align-middle(style=\"font-size: 1em; color: #000;\") ActivityWatch\n\n    b-navbar-toggle(target=\"nav-collapse\")\n\n    b-collapse#nav-collapse(is-nav)\n      b-navbar-nav\n        // If only a single view (the default) is available\n        b-nav-item(v-if=\"activityViews.length === 1\", v-for=\"view in activityViews\", :key=\"view.name\", :to=\"view.pathUrl\")\n          div.px-2.px-lg-1\n            icon(name=\"calendar-day\")\n            | Activity\n\n        // If multiple (or no) activity views are available\n        b-nav-item-dropdown(v-if=\"activityViews.length !== 1\")\n          template(slot=\"button-content\")\n            div.d-inline.px-2.px-lg-1\n              icon(name=\"calendar-day\")\n              | Activity\n          b-dropdown-item(v-if=\"activityViews.length <= 0\", disabled)\n            | No activity reports available\n            br\n            small Make sure you have both an AFK and window watcher running\n          b-dropdown-item(v-for=\"view in activityViews\", :key=\"view.name\", :to=\"view.pathUrl\")\n            icon(:name=\"view.icon\")\n            | {{ view.name }}\n\n        b-nav-item(to=\"/timeline\" style=\"font-color: #000;\")\n          div.px-2.px-lg-1\n            icon(name=\"stream\")\n            | Timeline\n\n        b-nav-item(to=\"/stopwatch\")\n          div.px-2.px-lg-1\n            icon(name=\"stopwatch\")\n            | Stopwatch\n\n      // Brand on large screens (centered)\n      b-navbar-nav.abs-center.d-none.d-lg-block\n        b-navbar-brand(to=\"/\" style=\"background-color: transparent;\")\n          img.ml-0.aligh-middle(src=\"/static/logo.png\" style=\"height: 1.5em;\")\n          span.ml-2.align-middle(style=\"font-size: 1.0em; color: #000;\") ActivityWatch\n\n      b-navbar-nav.ml-auto\n        b-nav-item-dropdown\n          template(slot=\"button-content\")\n            div.d-inline.px-2.px-lg-1\n              icon(name=\"tools\")\n              | Tools\n          b-dropdown-item(to=\"/search\")\n            icon(name=\"search\")\n            | Search\n          b-dropdown-item(to=\"/query\")\n            icon(name=\"code\")\n            | Query\n\n        b-nav-item(to=\"/buckets\")\n          div.px-2.px-lg-1\n            icon(name=\"database\")\n            | Raw Data\n        b-nav-item(to=\"/settings\")\n          div.px-2.px-lg-1\n            icon(name=\"cog\")\n            | Settings\n</template>\n\n<style lang=\"scss\" scoped>\n.fixed-top-padding {\n  padding-bottom: 3.5em;\n}\n</style>\n\n<script>\n// only import the icons you use to reduce bundle size\nimport 'vue-awesome/icons/calendar-day';\nimport 'vue-awesome/icons/calendar-week';\nimport 'vue-awesome/icons/stream';\nimport 'vue-awesome/icons/database';\nimport 'vue-awesome/icons/search';\nimport 'vue-awesome/icons/code';\nimport 'vue-awesome/icons/stopwatch';\nimport 'vue-awesome/icons/cog';\nimport 'vue-awesome/icons/tools';\n\nimport 'vue-awesome/icons/mobile';\nimport 'vue-awesome/icons/desktop';\n\nimport _ from 'lodash';\n\nexport default {\n  name: 'Header',\n  data() {\n    return {\n      activityViews: [],\n      // Make configurable?\n      fixedTopMenu: this.$isAndroid,\n    };\n  },\n  mounted: async function () {\n    const buckets = await this.$aw.getBuckets();\n    const types_by_host = {};\n\n    // TODO: Change to use same bucket detection logic as get_buckets/set_available in store/modules/activity.ts\n    _.each(buckets, v => {\n      types_by_host[v.hostname] = types_by_host[v.hostname] || {};\n      // The '&& true;' is just to typecoerce into booleans\n      types_by_host[v.hostname].afk |= v.type == 'afkstatus';\n      types_by_host[v.hostname].window |= v.type == 'currentwindow';\n      types_by_host[v.hostname].android |= v.type == 'currentwindow' && v.id.includes('android'); // Use other bucket type ID in the future\n    });\n    //console.log(types_by_host);\n\n    _.each(types_by_host, (types, hostname) => {\n      if (hostname != 'unknown') {\n        this.activityViews.push({\n          name: hostname,\n          hostname: hostname,\n          type: 'default',\n          pathUrl: `/activity/${hostname}`,\n          icon: 'desktop',\n        });\n      }\n      if (types.android) {\n        this.activityViews.push({\n          name: `${hostname} (Android)`,\n          hostname: hostname,\n          type: 'android',\n          pathUrl: `/activity/${hostname}`,\n          icon: 'mobile',\n        });\n      }\n    });\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.aw-navbar {\n  background-color: #fff;\n  border: solid #ccc;\n  border-width: 0 0 1px 0;\n}\n\n.nav-item {\n  align-items: center;\n\n  margin-left: 0.2em;\n  margin-right: 0.2em;\n  border-radius: 0.5em;\n\n  &:hover {\n    background-color: #ddd;\n  }\n}\n\n.abs-center {\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n}\n</style>\n\n<style lang=\"scss\">\n// Needed because dropdown somehow doesn't properly work with scoping\n.nav-item {\n  .nav-link {\n    color: #555 !important;\n  }\n}\n</style>\n"]}]}