{"remainingRequest":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/src/components/SelectableVisualization.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/src/components/SelectableVisualization.vue","mtime":1622830085274},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server-rust/aw-webui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnZpcy1zdHlsZS1kcm9wZG93bi1idG4gewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDAuOGVtOwogIHJpZ2h0OiAwLjhlbTsKCiAgLmJ0biB7CiAgICBib3JkZXI6IDBweDsKICB9Cn0K"},{"version":3,"sources":["SelectableVisualization.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"SelectableVisualization.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\ndiv\n  h5\n    icon.handle(name=\"bars\" v-if=\"editable\" style=\"opacity: 0.6; cursor: grab;\")\n    | {{ visualizations[type].title }}\n  div(v-if=\"editable\").vis-style-dropdown-btn\n    b-dropdown.mr-1(size=\"sm\" variant=\"outline-secondary\" right)\n      template(v-slot:button-content)\n        icon(name=\"cog\")\n      b-dropdown-item(v-for=\"t in types\" :key=\"t\" variant=\"outline-secondary\" @click=\"$emit('onTypeChange', id, t)\")\n        | {{ visualizations[t].title }} #[span.small(v-if=\"!visualizations[t].available\" style=\"color: #A50\") (no data)]\n    b-button.p-0(size=\"sm\", variant=\"outline-danger\" @click=\"$emit('onRemove', id)\")\n      icon(name=\"times\")\n\n  div(v-if=\"!supports_period\")\n    b-alert.small.px-2.py-1(show variant=\"warning\")\n      | This feature doesn't support the current time period.\n\n  div(v-if=\"$store.state.activity.buckets.loaded\")\n    // Check data prerequisites\n    div(v-if=\"!has_prerequisites\")\n      b-alert.small.px-2.py-1(show variant=\"warning\")\n        | This feature is missing data from a required watcher.\n        | You can find a list of all watchers in #[a(href=\"https://activitywatch.readthedocs.io/en/latest/watchers.html\") the documentation].\n\n    div(v-if=\"type == 'top_apps'\")\n      aw-summary(:fields=\"$store.state.activity.window.top_apps\",\n                 :namefunc=\"e => e.data.app\",\n                 :colorfunc=\"e => e.data.app\",\n                 with_limit)\n    div(v-if=\"type == 'top_titles'\")\n      aw-summary(:fields=\"$store.state.activity.window.top_titles\",\n                 :namefunc=\"e => e.data.title\",\n                 :colorfunc=\"e => e.data.title\",\n                 with_limit)\n    div(v-if=\"type == 'top_domains'\")\n      aw-summary(:fields=\"$store.state.activity.browser.top_domains\",\n                 :namefunc=\"e => e.data.$domain\",\n                 :colorfunc=\"e => e.data.$domain\",\n                 with_limit)\n    div(v-if=\"type == 'top_urls'\")\n      aw-summary(:fields=\"$store.state.activity.browser.top_urls\",\n                 :namefunc=\"e => e.data.url\",\n                 :colorfunc=\"e => e.data.$domain\",\n                 with_limit)\n    div(v-if=\"type == 'top_editor_files'\")\n      aw-summary(:fields=\"$store.state.activity.editor.top_files\",\n                 :namefunc=\"top_editor_files_namefunc\",\n                 :hoverfunc=\"top_editor_files_hoverfunc\",\n                 :colorfunc=\"e => e.data.language\",\n                 with_limit)\n    div(v-if=\"type == 'top_editor_languages'\")\n      aw-summary(:fields=\"$store.state.activity.editor.top_languages\",\n                 :namefunc=\"e => e.data.language\",\n                 :colorfunc=\"e => e.data.language\",\n                 with_limit)\n    div(v-if=\"type == 'top_editor_projects'\")\n      aw-summary(:fields=\"$store.state.activity.editor.top_projects\",\n                 :namefunc=\"top_editor_projects_namefunc\",\n                 :hoverfunc=\"top_editor_projects_hoverfunc\",\n                 :colorfunc=\"e => e.data.language\",\n                 with_limit)\n    div(v-if=\"type == 'top_categories'\")\n      aw-summary(:fields=\"$store.state.activity.category.top\",\n                 :namefunc=\"e => e.data['$category'].join(' > ')\",\n                 :colorfunc=\"e => e.data['$category'].join(' > ')\",\n                 with_limit)\n    div(v-if=\"type == 'category_tree'\")\n      aw-categorytree(:events=\"$store.state.activity.category.top\")\n    div(v-if=\"type == 'category_sunburst'\")\n      aw-sunburst-categories(:data=\"top_categories_hierarchy\", style=\"height: 20em\")\n    div(v-if=\"type == 'timeline_barchart'\")\n      aw-timeline-barchart(:datasets=\"datasets\", style=\"height: 100\")\n    div(v-if=\"type == 'sunburst_clock'\")\n      aw-sunburst-clock(:date=\"date\", :afkBucketId=\"$store.state.activity.buckets.afk[0]\", :windowBucketId=\"$store.state.activity.buckets.window[0]\")\n</template>\n\n<style lang=\"scss\">\n.vis-style-dropdown-btn {\n  position: absolute;\n  top: 0.8em;\n  right: 0.8em;\n\n  .btn {\n    border: 0px;\n  }\n}\n</style>\n\n<script>\nimport _ from 'lodash';\nimport 'vue-awesome/icons/cog';\nimport 'vue-awesome/icons/times';\nimport 'vue-awesome/icons/bars';\n\nimport { split_by_hour_into_data } from '~/util/transforms';\n\n// TODO: Move this somewhere else\nimport { build_category_hierarchy } from '~/util/classes';\nimport { getColorFromCategory } from '~/util/color';\n\nfunction pick_subname_as_name(c) {\n  c.name = c.subname;\n  c.children = c.children.map(pick_subname_as_name);\n  return c;\n}\n\nexport default {\n  name: 'aw-selectable-vis',\n  props: {\n    id: Number,\n    type: String,\n    editable: { type: Boolean, default: true },\n  },\n  data: function () {\n    return {\n      types: [\n        'top_apps',\n        'top_titles',\n        'top_domains',\n        'top_urls',\n        'top_categories',\n        'category_tree',\n        'category_sunburst',\n        'top_editor_files',\n        'top_editor_languages',\n        'top_editor_projects',\n        'timeline_barchart',\n        'sunburst_clock',\n      ],\n      // TODO: Move this function somewhere else\n      top_editor_files_namefunc: e => {\n        let f = e.data.file || '';\n        f = f.split('/');\n        f = f[f.length - 1];\n        return f;\n      },\n      top_editor_files_hoverfunc: e => {\n        return 'file: ' + e.data.file + '\\n' + 'project: ' + e.data.project;\n      },\n      // TODO: Move this function somewhere else\n      top_editor_projects_namefunc: e => {\n        let f = e.data.project || '';\n        f = f.split('/');\n        f = f[f.length - 1];\n        return f;\n      },\n      top_editor_projects_hoverfunc: e => e.data.project,\n    };\n  },\n  computed: {\n    visualizations: function () {\n      return {\n        top_apps: {\n          title: 'Top Applications',\n          available:\n            this.$store.state.activity.window.available ||\n            this.$store.state.activity.android.available,\n        },\n        top_titles: {\n          title: 'Top Window Titles',\n          available: this.$store.state.activity.window.available,\n        },\n        top_domains: {\n          title: 'Top Browser Domains',\n          available: this.$store.state.activity.browser.available,\n        },\n        top_urls: {\n          title: 'Top Browser URLs',\n          available: this.$store.state.activity.browser.available,\n        },\n        top_editor_files: {\n          title: 'Top Editor Files',\n          available: this.$store.state.activity.editor.available,\n        },\n        top_editor_languages: {\n          title: 'Top Editor Languages',\n          available: this.$store.state.activity.editor.available,\n        },\n        top_editor_projects: {\n          title: 'Top Editor Projects',\n          available: this.$store.state.activity.editor.available,\n        },\n        top_categories: {\n          title: 'Top Categories',\n          available: this.$store.state.activity.category.available,\n        },\n        category_tree: {\n          title: 'Category Tree',\n          available: this.$store.state.activity.category.available,\n        },\n        category_sunburst: {\n          title: 'Category Sunburst',\n          available: this.$store.state.activity.category.available,\n        },\n        timeline_barchart: {\n          title: 'Timeline (barchart)',\n          available: true,\n        },\n        sunburst_clock: {\n          title: 'Sunburst clock',\n          available:\n            this.$store.state.activity.window.available &&\n            this.$store.state.activity.active.available,\n        },\n      };\n    },\n    has_prerequisites() {\n      return this.visualizations[this.type].available;\n    },\n    supports_period: function () {\n      if (this.type == 'sunburst_clock' || this.type == 'timeline_barchart') {\n        return this.isSingleDay;\n      }\n      return true;\n    },\n    top_categories_hierarchy: function () {\n      const top_categories = this.$store.state.activity.category.top;\n      if (top_categories) {\n        const categories = top_categories.map(c => {\n          return { name: c.data.$category, size: c.duration };\n        });\n\n        return {\n          name: 'All',\n          children: build_category_hierarchy(categories).map(c => pick_subname_as_name(c)),\n        };\n      } else {\n        return null;\n      }\n    },\n    datasets: function () {\n      const METHOD_CATEGORY = 'category';\n      const METHOD_ACTIVITY = 'activity';\n      const method = METHOD_CATEGORY;\n      if (method == METHOD_CATEGORY) {\n        const SEP = '>>>';\n        const data = this.$store.state.activity.category.by_hour;\n        if (data) {\n          const categories = new Set(\n            Object.values(data)\n              .map(result => {\n                return result.cat_events.map(e => e.data['$category'].join(SEP));\n              })\n              .flat()\n          );\n          const ds = [...categories].map(c_ => {\n            const c = this.$store.getters['categories/get_category'](c_.split(SEP));\n            if (c) {\n              return {\n                label: c.name.join(' > '),\n                backgroundColor: getColorFromCategory(c, this.$store.state.categories.classes),\n                data: Object.values(data).map(results => {\n                  const cat = results.cat_events.find(e => _.isEqual(e.data['$category'], c.name));\n                  if (cat) return Math.round((cat.duration / (60 * 60)) * 1000) / 1000;\n                  else return null;\n                }),\n              };\n            } else {\n              console.log('missing c');\n            }\n          });\n          return ds;\n        } else {\n          return [];\n        }\n      } else if (method == METHOD_ACTIVITY) {\n        const data = split_by_hour_into_data(this.$store.state.activity.active.events);\n        return [\n          {\n            label: 'Total time',\n            backgroundColor: '#6699ff',\n            data,\n          },\n        ];\n      }\n      return [];\n    },\n    date: function () {\n      let date = this.$store.state.activity.query_options.date;\n      if (!date) {\n        date = this.$store.state.activity.query_options.timeperiod.start;\n      }\n      return date;\n    },\n    isSingleDay: function () {\n      return _.isEqual(this.$store.state.activity.query_options.timeperiod.length, [1, 'day']);\n    },\n  },\n};\n</script>\n"]}]}