{"remainingRequest":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/src/views/Buckets.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/src/views/Buckets.vue","mtime":1622212604097},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jaskaran/code/jaskaran/activitywatch/aw-server/aw-webui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAndnVlLWF3ZXNvbWUvaWNvbnMvdHJhc2gnOwppbXBvcnQgJ3Z1ZS1hd2Vzb21lL2ljb25zL2Rvd25sb2FkJzsKaW1wb3J0ICd2dWUtYXdlc29tZS9pY29ucy9mb2xkZXItb3Blbic7CmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0J1Y2tldHMnLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpbXBvcnRfZmlsZTogbnVsbCwKICAgICAgaW1wb3J0X2Vycm9yOiBudWxsLAogICAgICBkZWxldGVfYnVja2V0X3NlbGVjdGVkOiBudWxsLAogICAgICBmaWVsZHM6IFsKICAgICAgICB7IGtleTogJ2lkJywgbGFiZWw6ICdCdWNrZXQgSUQnLCBzb3J0YWJsZTogdHJ1ZSB9LAogICAgICAgIHsga2V5OiAnaG9zdG5hbWUnLCBzb3J0YWJsZTogdHJ1ZSB9LAogICAgICAgIHsga2V5OiAnbGFzdF91cGRhdGVkJywgbGFiZWw6ICdVcGRhdGVkJywgc29ydGFibGU6IHRydWUgfSwKICAgICAgICB7IGtleTogJ2FjdGlvbnMnLCBsYWJlbDogJycgfSwKICAgICAgXSwKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgYnVja2V0czogZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gXy5vcmRlckJ5KHRoaXMuJHN0b3JlLnN0YXRlLmJ1Y2tldHMuYnVja2V0cywgW2IgPT4gYi5pZF0sIFsnYXNjJ10pOwogICAgfSwKICB9LAogIHdhdGNoOiB7CiAgICBpbXBvcnRfZmlsZTogYXN5bmMgZnVuY3Rpb24gKF9uZXdfdmFsdWUsIF9vbGRfdmFsdWUpIHsKICAgICAgaWYgKHRoaXMuaW1wb3J0X2ZpbGUgIT0gbnVsbCkgewogICAgICAgIGNvbnNvbGUubG9nKCdJbXBvcnRpbmcgZmlsZScpOwogICAgICAgIHRyeSB7CiAgICAgICAgICBhd2FpdCB0aGlzLmltcG9ydEJ1Y2tldHModGhpcy5pbXBvcnRfZmlsZSk7CiAgICAgICAgICBjb25zb2xlLmxvZygnSW1wb3J0IHN1Y2Nlc3NmdWwnKTsKICAgICAgICAgIHRoaXMuaW1wb3J0X2Vycm9yID0gbnVsbDsKICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdJbXBvcnQgZmFpbGVkJyk7CiAgICAgICAgICAvLyBUT0RPOiBNYWtlIGF3LXNlcnZlciByZXBvcnQgZXJyb3IgbWVzc2FnZSBzbyBpdCBjYW4gYmUgc2hvd24gaW4gdGhlIHdlYi11aQogICAgICAgICAgdGhpcy5pbXBvcnRfZXJyb3IgPSAnSW1wb3J0IGZhaWxlZCwgc2VlIGF3LXNlcnZlciBsb2dzIGZvciBtb3JlIGluZm8nOwogICAgICAgIH0KICAgICAgICAvLyBXZSBuZWVkIHRvIHJlbG9hZCBidWNrZXRzIGV2ZW4gaWYgd2UgZmFpbCBiZWNhdXNlIGltcG9ydHMgY2FuIGJlIHBhcnRpYWwKICAgICAgICAvLyAoZmlyc3QgYnVja2V0IHN1Y2NlZWRzLCBzZWNvbmQgZmFpbHMgZm9yIGV4YW1wbGUgd2hlbiBpbXBvcnRpbmcgbXVsdGlwbGUpCiAgICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2J1Y2tldHMvbG9hZEJ1Y2tldHMnKTsKICAgICAgICB0aGlzLmltcG9ydF9maWxlID0gbnVsbDsKICAgICAgfQogICAgfSwKICB9LAogIG1vdW50ZWQ6IGFzeW5jIGZ1bmN0aW9uICgpIHsKICAgIGF3YWl0IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdidWNrZXRzL2Vuc3VyZUJ1Y2tldHMnKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIG9wZW5EZWxldGVCdWNrZXRNb2RhbDogZnVuY3Rpb24gKGJ1Y2tldElkKSB7CiAgICAgIHRoaXMuZGVsZXRlX2J1Y2tldF9zZWxlY3RlZCA9IGJ1Y2tldElkOwogICAgICB0aGlzLiRyb290LiRlbWl0KCdidjo6c2hvdzo6bW9kYWwnLCAnZGVsZXRlLW1vZGFsJyk7CiAgICB9LAogICAgZGVsZXRlQnVja2V0OiBhc3luYyBmdW5jdGlvbiAoYnVja2V0SWQpIHsKICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2J1Y2tldHMvZGVsZXRlQnVja2V0JywgeyBidWNrZXRJZCB9KTsKICAgICAgdGhpcy4kcm9vdC4kZW1pdCgnYnY6OmhpZGU6Om1vZGFsJywgJ2RlbGV0ZS1tb2RhbCcpOwogICAgfSwKICAgIGltcG9ydEJ1Y2tldHM6IGFzeW5jIGZ1bmN0aW9uIChpbXBvcnRGaWxlKSB7CiAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnYnVja2V0cy5qc29uJywgaW1wb3J0RmlsZSk7CiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7ICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScgfTsKICAgICAgcmV0dXJuIHRoaXMuJGF3LnJlcS5wb3N0KCcvMC9pbXBvcnQnLCBmb3JtRGF0YSwgeyBoZWFkZXJzIH0pOwogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["Buckets.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Buckets.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"pug\">\ndiv\n  h2 Buckets\n\n  b-alert(show)\n    | Are you looking to collect more data? Check out #[a(href=\"https://activitywatch.readthedocs.io/en/latest/watchers.html\") the docs] for more watchers.\n\n  b-table(hover, small, :items=\"buckets\", :fields=\"fields\", responsive=\"md\", sort-by=\"last_updated\", :sort-desc=\"true\")\n    template(v-slot:cell(id)=\"data\")\n      small\n        | {{ data.item.id }}\n    template(v-slot:cell(hostname)=\"data\")\n      small\n        | {{ data.item.hostname }}\n    template(v-slot:cell(last_updated)=\"data\")\n      // aw-server-python\n      small(v-if=\"data.item.last_updated\")\n        | {{ data.item.last_updated | friendlytime }}\n      // aw-server-rust\n      small(v-if=\"data.item.metadata && data.item.metadata.end\")\n        | {{ data.item.metadata.end | friendlytime }}\n    template(v-slot:cell(actions)=\"data\")\n      b-button-toolbar.float-right\n        b-button-group(size=\"sm\", class=\"mx-1\")\n          b-button(variant=\"primary\", :to=\"'/buckets/' + data.item.id\")\n            icon(name=\"folder-open\").d-none.d-md-inline-block\n            | Open\n          b-dropdown(variant=\"outline-secondary\", size=\"sm\", text=\"More\")\n            b-dropdown-item(\n                       :href=\"$aw.baseURL + '/api/0/buckets/' + data.item.id + '/export'\",\n                       :download=\"'aw-bucket-export-' + data.item.id + '.json'\",\n                       title=\"Export bucket to JSON\",\n                       variant=\"secondary\")\n                icon(name=\"download\")\n                | Export as JSON\n            b-dropdown-divider\n            b-dropdown-item-button(@click=\"openDeleteBucketModal(data.item.id)\",\n                     title=\"Delete this bucket permanently\",\n                     variant=\"danger\")\n              | #[icon(name=\"trash\")] Delete bucket\n\n  b-modal(id=\"delete-modal\", title=\"Danger!\", centered, hide-footer)\n    | Are you sure you want to delete bucket \"{{delete_bucket_selected}}\"?\n    br\n    br\n    b This is permanent and cannot be undone!\n    hr\n    div.float-right\n      b-button.mx-2(@click=\"$root.$emit('bv::hide::modal','delete-modal')\")\n        | Cancel\n      b-button(@click=\"deleteBucket(delete_bucket_selected)\", variant=\"danger\")\n        | Confirm\n\n  h3 Import and export buckets\n\n  b-card-group.deck\n    b-card(header=\"Import buckets\")\n      b-alert(v-if=\"import_error\" show variant=\"danger\" dismissable)\n        | {{ import_error }}\n      b-form-file(v-model=\"import_file\"\n                  placeholder=\"Choose a file or drop file here...\"\n                  drop-placeholder=\"Drop file here...\")\n      // TODO: This spinner could be placed in a more suitable place\n      div(v-if=\"import_file\" class=\"spinner-border\" role=\"status\")\n      span\n        | A valid file to import is a JSON file from either an export of a single bucket or an export from multiple buckets.\n        | If there are buckets with the same name the import will fail\n    b-card(header=\"Export buckets\")\n      b-button(:href=\"$aw.baseURL + '/api/0/export'\",\n               :download=\"'aw-bucket-export.json'\",\n               title=\"Export bucket to JSON\",\n               variant=\"outline-secondary\")\n        icon(name=\"download\")\n        | Export all buckets as JSON\n\n</template>\n\n<style lang=\"scss\">\n// This won't work if scoped\n.bucket-card {\n  .card-header,\n  .card-footer {\n    padding: 0.5em 0.75em 0.5em 0.75em;\n  }\n\n  .card-body {\n    padding: 0.5em;\n  }\n}\n</style>\n\n<style scoped lang=\"scss\">\n.bucket-card {\n  margin-bottom: 1em;\n}\n\n.bucket-last-updated {\n  color: #666;\n}\n</style>\n\n<script>\nimport 'vue-awesome/icons/trash';\nimport 'vue-awesome/icons/download';\nimport 'vue-awesome/icons/folder-open';\nimport _ from 'lodash';\n\nexport default {\n  name: 'Buckets',\n  data() {\n    return {\n      import_file: null,\n      import_error: null,\n      delete_bucket_selected: null,\n      fields: [\n        { key: 'id', label: 'Bucket ID', sortable: true },\n        { key: 'hostname', sortable: true },\n        { key: 'last_updated', label: 'Updated', sortable: true },\n        { key: 'actions', label: '' },\n      ],\n    };\n  },\n  computed: {\n    buckets: function () {\n      return _.orderBy(this.$store.state.buckets.buckets, [b => b.id], ['asc']);\n    },\n  },\n  watch: {\n    import_file: async function (_new_value, _old_value) {\n      if (this.import_file != null) {\n        console.log('Importing file');\n        try {\n          await this.importBuckets(this.import_file);\n          console.log('Import successful');\n          this.import_error = null;\n        } catch (err) {\n          console.log('Import failed');\n          // TODO: Make aw-server report error message so it can be shown in the web-ui\n          this.import_error = 'Import failed, see aw-server logs for more info';\n        }\n        // We need to reload buckets even if we fail because imports can be partial\n        // (first bucket succeeds, second fails for example when importing multiple)\n        await this.$store.dispatch('buckets/loadBuckets');\n        this.import_file = null;\n      }\n    },\n  },\n  mounted: async function () {\n    await this.$store.dispatch('buckets/ensureBuckets');\n  },\n  methods: {\n    openDeleteBucketModal: function (bucketId) {\n      this.delete_bucket_selected = bucketId;\n      this.$root.$emit('bv::show::modal', 'delete-modal');\n    },\n    deleteBucket: async function (bucketId) {\n      await this.$store.dispatch('buckets/deleteBucket', { bucketId });\n      this.$root.$emit('bv::hide::modal', 'delete-modal');\n    },\n    importBuckets: async function (importFile) {\n      const formData = new FormData();\n      formData.append('buckets.json', importFile);\n      const headers = { 'Content-Type': 'multipart/form-data' };\n      return this.$aw.req.post('/0/import', formData, { headers });\n    },\n  },\n};\n</script>\n"]}]}